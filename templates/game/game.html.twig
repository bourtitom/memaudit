{% extends 'base.html.twig' %}

{% block title %}Jeu de Memory{% endblock %}

{% block body %}
    <style>
        .card-container {
            perspective: 1000px;
            aspect-ratio: 3/4;
        }
        .card-flip {
            position: relative;
            width: 100%;
            height: 100%;
            transition: transform 0.6s;
            transform-style: preserve-3d;
            cursor: pointer;
        }
        .card-flip.flipped {
            transform: rotateY(180deg);
        }
        .card-front, .card-back {
            position: absolute;
            width: 100%;
            height: 100%;
            backface-visibility: hidden;
            display: flex;
            justify-content: center;
            align-items: center;
            font-size: 24px;
            border-radius: 8px;
            overflow: hidden;
        }
        .card-front {
            background-color: var(--bs-primary);
            color: white;
        }
        .card-back {
            background-color: white;
            transform: rotateY(180deg);
        }
        .card-back img {
            width: 100%;
            height: 100%;
            object-fit: cover;
        }
        .card-flip.matched .card-back {
            outline: 3px solid var(--bs-success);
        }
    </style>

    <div class="container mt-5">
        <h1 class="text-center mb-4">Jeu de Memory</h1>
        
        <div class="row justify-content-center g-3 mb-4" id="gameContainer">
            <!-- Les cartes seront ajoutées ici par JavaScript -->
        </div>
        
        <div class="text-center">
            <h5 class="mb-3">Coups : <span id="moves" class="badge bg-primary">0</span></h5>
        </div>
    </div>

     <script>
        // Limiter à 6 images (qui seront dupliquées pour faire 12 cartes)
        let allImages = {{ images|json_encode|raw }};
        let selectedImages = [];
        
        // Sélectionner aléatoirement 6 images
        if (allImages.length > 3) {
            const shuffledImages = shuffleArray([...allImages]);
            selectedImages = shuffledImages.slice(0, 4);
        } else {
            selectedImages = allImages;
        }

        // Dupliquer les images pour créer les paires
        const gameImages = [...selectedImages, ...selectedImages];
        
        let flippedCards = [];
        let matchedPairs = 0;
        let moves = 0;

        function shuffleArray(array) {
            for (let i = array.length - 1; i > 0; i--) {
                const j = Math.floor(Math.random() * (i + 1));
                [array[i], array[j]] = [array[j], array[i]];
            }
            return array;
        }

        function createBoard() {
            const shuffledImages = shuffleArray(gameImages);
            const gameContainer = document.getElementById('gameContainer');
            
            shuffledImages.forEach((imagePath, index) => {
                const colDiv = document.createElement('div');
                colDiv.className = 'col-6 col-sm-4 col-md-2';

                const cardContainer = document.createElement('div');
                cardContainer.className = 'card-container';

                const cardFlip = document.createElement('div');
                cardFlip.className = 'card-flip shadow-sm';
                cardFlip.dataset.index = index;
                cardFlip.dataset.image = imagePath;

                const cardFront = document.createElement('div');
                cardFront.className = 'card-front';
                cardFront.innerHTML = '❓';

                const cardBack = document.createElement('div');
                cardBack.className = 'card-back';
                const img = document.createElement('img');
                img.src = imagePath;
                img.alt = 'Card image';
                cardBack.appendChild(img);

                cardFlip.appendChild(cardFront);
                cardFlip.appendChild(cardBack);
                cardContainer.appendChild(cardFlip);
                colDiv.appendChild(cardContainer);
                gameContainer.appendChild(colDiv);

                cardFlip.addEventListener('click', flipCard);
            });
        }

        function flipCard() {
            if (flippedCards.length === 2) return;
            if (this.classList.contains('flipped')) return;

            this.classList.add('flipped');
            flippedCards.push(this);

            if (flippedCards.length === 2) {
                moves++;
                document.getElementById('moves').textContent = moves;
                setTimeout(checkMatch, 1000);
            }
        }

  
           function saveScore(moves) {
            fetch('{{ path('save_score') }}?theme=' + currentTheme, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'X-Requested-With': 'XMLHttpRequest'
                },
                body: JSON.stringify({ moves: moves })
            })
            .then(response => {
                if (!response.ok) {
                    throw new Error('Network response was not ok');
                }
                return response.json();
            })
            .then(data => {
                console.log('Score saved:', data);
            })
            .catch(error => {
                console.error('Error saving score:', error);
            });
        }

        function checkMatch() {
            const [card1, card2] = flippedCards;

            if (card1.dataset.image === card2.dataset.image) {
                card1.classList.add('matched');
                card2.classList.add('matched');
                matchedPairs++;
                if (matchedPairs === selectedImages.length) {
                    setTimeout(() => {
                        saveScore(moves);
                        alert(`Félicitations ! Vous avez gagné en ${moves} coups !`);
                    }, 500);
                }
            } else {
                card1.classList.remove('flipped');
                card2.classList.remove('flipped');
            }
            flippedCards = [];
        }


        createBoard();
    </script>
{% endblock %}  